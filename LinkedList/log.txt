package LinkedList;

public class Y_IntersectionBest {
    public static class Node {
        int data;
        Node next;
        public Node(int data) {
            this.data = data;
            this.next = null;
        }
    }

    public static void print(Node head) {
        Node temp = head;
        if (head == null) {
            System.out.println("Empty LinkedList");
            return;
        }
        while (temp != null) {
            System.out.print(temp.data + " --> ");
            temp = temp.next;
        }
        System.out.println("null");
    }

    public static Node addTwoNumbers(Node head1, Node head2) {
        Node dummy = new Node(-1);
        Node temp = dummy;
        int carry = 0;

        while (head1 != null || head2 != null || carry != 0) {
            int sum = carry;

            if (head1 != null) {
                sum += head1.data;
                head1 = head1.next;
            }

            if (head2 != null) {
                sum += head2.data;
                head2 = head2.next;
            }

            carry = sum / 10;
            Node newNode = new Node(sum % 10);
            temp.next = newNode;
            temp = temp.next;
        }

        return dummy.next;
    }

    public static void main(String[] args) {
        // Initialize lists
        Node head1 = new Node(3);
        head1.next = new Node(2);
        head1.next.next = new Node(1);

        Node head2 = new Node(6);
        head2.next = new Node(5);
        head2.next.next = new Node(4);

        // Print the input lists
        System.out.println("List 1:");
        print(head1);

        System.out.println("List 2:");
        print(head2);

        // Add two numbers
        Node result = addTwoNumbers(head1, head2);

        // Print the result
        System.out.println("Sum of two numbers represented by linked lists:");
        print(result);
    }
} 